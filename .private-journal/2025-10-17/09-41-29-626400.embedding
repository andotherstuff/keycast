{
  "embedding": [
    -0.0006575282895937562,
    -0.07024240493774414,
    -0.03294270113110542,
    0.0015939854783937335,
    -0.008580273948609829,
    0.008449364453554153,
    -0.005523701198399067,
    0.022009599953889847,
    0.040146052837371826,
    0.06768926978111267,
    -0.023326095193624496,
    0.01737290248274803,
    0.07525041699409485,
    -0.059160422533750534,
    0.038736484944820404,
    0.01910165511071682,
    0.09220321476459503,
    -0.023203719407320023,
    -0.0877709612250328,
    0.015777673572301865,
    -0.001617794274352491,
    -0.10664304345846176,
    0.013413160108029842,
    0.02324608527123928,
    -0.056243523955345154,
    -0.004226239863783121,
    -0.032694894820451736,
    -0.004738191608339548,
    -0.08442496508359909,
    -0.04732464253902435,
    -0.006458871997892857,
    0.015939811244606972,
    0.0469987727701664,
    0.11472989618778229,
    -0.07618814706802368,
    -0.00037919427268207073,
    0.08806401491165161,
    -0.06545474380254745,
    -0.109775111079216,
    -0.029916074126958847,
    0.02298414520919323,
    -0.03467624634504318,
    -0.10281650722026825,
    0.023387813940644264,
    -0.03068285994231701,
    -0.03870958462357521,
    -0.03846122324466705,
    -0.01657511480152607,
    -0.06790624558925629,
    -0.02001233585178852,
    0.00163601606618613,
    -0.009330648928880692,
    -0.030646761879324913,
    0.10797184705734253,
    -0.021256405860185623,
    0.03851279243826866,
    -0.042720966041088104,
    -0.0121852932497859,
    0.05358770117163658,
    -0.019448624923825264,
    0.03639974072575569,
    0.01097904983907938,
    -0.018356891348958015,
    0.006033195648342371,
    0.01828339695930481,
    0.03124851919710636,
    0.05830308794975281,
    -0.026872092857956886,
    0.07621059566736221,
    -0.001416700892150402,
    0.02153836190700531,
    -0.015648581087589264,
    -0.10499314963817596,
    -0.04758068546652794,
    -0.09037324041128159,
    0.038267239928245544,
    0.011833048425614834,
    0.005045696161687374,
    -0.002333954209461808,
    -0.041532378643751144,
    0.013217473402619362,
    0.05489441379904747,
    -0.040786802768707275,
    0.01901637762784958,
    -0.081222765147686,
    -0.08515504002571106,
    0.004050427116453648,
    -0.023328116163611412,
    -0.0026412559673190117,
    -0.006847965065389872,
    0.08469056338071823,
    0.0876801609992981,
    0.05978883430361748,
    -0.012104223482310772,
    0.06371717900037766,
    -0.010770101100206375,
    0.015526754781603813,
    -0.019900672137737274,
    0.021569879725575447,
    -0.03067244216799736,
    0.04065157473087311,
    -0.014214932918548584,
    0.038127534091472626,
    -0.05035264417529106,
    -0.02662637270987034,
    -0.014984216541051865,
    -0.014402572065591812,
    -0.05456649884581566,
    -0.04909020662307739,
    0.012735738418996334,
    -0.007957025431096554,
    0.06817729026079178,
    -0.029284441843628883,
    -0.027600856497883797,
    0.026755210012197495,
    0.03497087582945824,
    -0.02784743160009384,
    -0.02233867160975933,
    0.08571793884038925,
    0.065238818526268,
    0.03280797228217125,
    -0.012760103680193424,
    0.06016768142580986,
    -0.045839790254831314,
    -0.02307693473994732,
    -0.015592931769788265,
    -0.07855380326509476,
    1.2486641721835716e-32,
    -0.02997104451060295,
    0.0026397183537483215,
    -0.03043910302221775,
    -0.08851588517427444,
    0.040263377130031586,
    0.03232043236494064,
    0.005043295212090015,
    0.04724682494997978,
    -0.13192693889141083,
    -0.024884900078177452,
    -0.013699340634047985,
    0.05333394557237625,
    -0.03422980010509491,
    -0.015790339559316635,
    0.13483184576034546,
    0.0595337338745594,
    0.006929820869117975,
    0.09606732428073883,
    0.07240796834230423,
    0.009247995913028717,
    0.044094499200582504,
    0.038562629371881485,
    -0.005078351590782404,
    0.04746181145310402,
    0.09258212149143219,
    -0.08348256349563599,
    0.032386038452386856,
    -0.08101943135261536,
    0.00950299110263586,
    0.01100214570760727,
    -0.00606231763958931,
    -0.003790199989452958,
    0.005713363643735647,
    0.04628022015094757,
    0.010771334171295166,
    0.05538339540362358,
    -0.055650945752859116,
    -0.053648315370082855,
    -0.048640988767147064,
    -0.12535767257213593,
    -0.05070365220308304,
    0.0016072657890617847,
    0.004560983274132013,
    -0.025251906365156174,
    -0.001844377489760518,
    0.013800013810396194,
    -0.011778219603002071,
    -0.0059461332857608795,
    -0.010578730143606663,
    0.05007803067564964,
    0.024003909900784492,
    0.03720085695385933,
    -0.055144816637039185,
    0.04259103536605835,
    0.011836515739560127,
    0.01824982464313507,
    0.04005158320069313,
    -0.007305958308279514,
    0.013294659554958344,
    0.13007208704948425,
    -0.11346093565225601,
    -0.033333681523799896,
    0.011326923035085201,
    0.0036851547192782164,
    0.05429122969508171,
    -0.017030661925673485,
    -0.07506866008043289,
    -0.006272409576922655,
    0.04824361205101013,
    0.03291749954223633,
    -0.023730412125587463,
    -0.012754139490425587,
    0.08827243745326996,
    -0.010428521782159805,
    0.006278967019170523,
    -0.07870805263519287,
    -0.06961089372634888,
    -0.03148467838764191,
    -0.02956201694905758,
    0.020682116970419884,
    -0.07034160941839218,
    0.038358885794878006,
    -0.07233067601919174,
    0.07537202537059784,
    -0.14668646454811096,
    0.011405827477574348,
    0.04028649255633354,
    0.02597622387111187,
    -0.09644205868244171,
    0.019807549193501472,
    0.023109329864382744,
    -0.03745121881365776,
    0.0789005383849144,
    -0.064219631254673,
    -0.03174286335706711,
    -1.0997593069139215e-32,
    -0.03182275965809822,
    -0.09795241802930832,
    -0.05756547674536705,
    0.12413586676120758,
    0.046683259308338165,
    0.005504141561686993,
    0.007773976307362318,
    -0.06553640961647034,
    -0.013581494800746441,
    -0.06891009956598282,
    -0.07561255246400833,
    -0.02303793840110302,
    0.11579939723014832,
    -0.001520078512839973,
    -0.006376851350069046,
    -0.002310423878952861,
    -0.004070702940225601,
    -0.1108446940779686,
    -0.0232242364436388,
    0.032842859625816345,
    -0.00353959109634161,
    0.05597409978508949,
    -0.005317277275025845,
    0.07497499883174896,
    0.05575165897607803,
    0.0027524305041879416,
    -0.07136508822441101,
    0.042170967906713486,
    0.01573435589671135,
    -0.04560225456953049,
    0.0055284942500293255,
    0.037793390452861786,
    -0.025650780647993088,
    -0.061481643468141556,
    -0.065850168466568,
    -0.04973402991890907,
    0.028768492862582207,
    0.023269040510058403,
    -0.0275475662201643,
    -0.03554075211286545,
    0.011447418481111526,
    -0.005084807984530926,
    0.04374605044722557,
    -0.07711475342512131,
    0.014658716507256031,
    0.08089111745357513,
    -0.010238315910100937,
    0.00937090814113617,
    0.012683928944170475,
    0.00635388633236289,
    -0.05275474116206169,
    -0.00031084849615581334,
    -0.03413251414895058,
    0.018873440101742744,
    0.06881306320428848,
    -0.034462131559848785,
    -0.04271935671567917,
    0.040644142776727676,
    -0.07298287749290466,
    0.01018795371055603,
    0.06881223618984222,
    0.05030255392193794,
    0.05649561434984207,
    0.09807296842336655,
    0.009569450281560421,
    -0.004564566537737846,
    0.019836576655507088,
    -0.019623301923274994,
    -0.0594145730137825,
    -0.03142818808555603,
    -0.017133066430687904,
    -0.0458584800362587,
    0.08552512526512146,
    -0.001186368172056973,
    0.0042245881631970406,
    0.021837538108229637,
    0.008293801918625832,
    -0.06331871449947357,
    -0.03728768229484558,
    0.008498918265104294,
    -0.09262813627719879,
    0.034903448075056076,
    -0.02855020947754383,
    0.034858185797929764,
    0.03906736150383949,
    -0.012741226702928543,
    0.050792209804058075,
    -0.017836667597293854,
    0.014006718061864376,
    0.03679725155234337,
    -0.07282155752182007,
    -0.023522023111581802,
    -0.135862797498703,
    -0.0058003743179142475,
    0.045982345938682556,
    -5.723093821075054e-8,
    0.056423891335725784,
    0.026244642212986946,
    -0.04035349562764168,
    -0.06166457384824753,
    0.04402945935726166,
    -0.0446246862411499,
    0.05403490737080574,
    0.08791624754667282,
    0.01599511131644249,
    0.07908442616462708,
    0.11885572969913483,
    -0.0665399506688118,
    -0.061909280717372894,
    -0.00032747050863690674,
    -0.03865985572338104,
    0.05516080930829048,
    0.0534837432205677,
    -0.09958024322986603,
    -0.04816243425011635,
    -0.0008799711940810084,
    -0.02333189733326435,
    0.022160403430461884,
    -0.11659986525774002,
    0.0011135614477097988,
    0.04454721137881279,
    0.0500023290514946,
    0.05375879630446434,
    0.03797256946563721,
    0.03526872768998146,
    0.046169403940439224,
    0.030971502885222435,
    -0.08522976189851761,
    0.04062735289335251,
    0.011097267270088196,
    0.03163670748472214,
    0.031803715974092484,
    0.026578903198242188,
    0.06757482141256332,
    0.0428396612405777,
    0.10723553597927094,
    0.025330673903226852,
    -0.0461353175342083,
    0.03947408124804497,
    0.011855671182274818,
    -0.007432599551975727,
    -0.034156955778598785,
    -0.06362000852823257,
    0.02347625233232975,
    0.013110557571053505,
    0.08956147730350494,
    -0.044201795011758804,
    -0.03429251164197922,
    -0.05978018790483475,
    0.09540881216526031,
    0.09986899793148041,
    0.029307393357157707,
    0.005370602943003178,
    -0.044910311698913574,
    0.11694040894508362,
    0.04700636491179466,
    0.08279935270547867,
    -0.05264397710561752,
    -0.04854821413755417,
    0.009191993623971939
  ],
  "text": "Keycast Database Architecture Research - Key Findings\n\nCURRENT STATE:\n- Multi-tenant Nostr key custody system (OAuth + NIP-46 remote signer)\n- Using SQLite with Litestream replication on Cloud Run\n- Application-level encryption: GCP KMS encrypts private keys BEFORE database storage\n- Database stores encrypted blobs, not plaintext keys\n- Multi-tenancy via tenant_id column (migration 0010_multi_tenancy.sql)\n- Current queries use SQLite syntax (? placeholders) across ~80 occurrences in 13 files\n- WAL mode enabled with busy_timeout=5000ms, synchronous=NORMAL\n- Max 5 connections in pool, acquire_timeout=10s\n\nCURRENT SCALE: Early stage, likely <10 tenants, <100 users currently\n\nKEY RESEARCH FINDINGS:\n\n1. DEFENSE IN DEPTH - ENCRYPTION LAYERING:\n- Application KMS encryption + database encryption IS valuable defense in depth\n- But: If SQLite file is on Cloud Run ephemeral storage, database-level encryption adds minimal value\n- Threat model: DB encryption protects against disk/backup theft scenarios\n- With Litestream backing up to GCS, the real attack surface is GCS bucket compromise\n- RECOMMENDATION: Application KMS encryption is sufficient for keycast's threat model\n\n2. POSTGRESQL RLS FOR MULTI-TENANCY:\n- RLS provides runtime (NOT compile-time) tenant isolation\n- Performance: RLS adds query planning overhead, BUT tenant_id filtering is simple predicate (minimal impact)\n- Real benefit: Defense in depth - prevents developer bugs (forgetting WHERE tenant_id = X)\n- With sqlx: Must use admin connection for compile-time checks, runtime connection with RLS policies\n- LIMITATION: sqlx compile-time checks work with RLS, but no compile-time enforcement of tenant isolation\n\n3. DATABASE-PER-TENANT ARCHITECTURE:\n- Advantages: Complete isolation, simpler to reason about security, easier tenant deletion/backup\n- Disadvantages: Connection pooling complexity (N*M pools for N users, M databases in PgBouncer)\n- Cost: ONE PostgreSQL instance can host 50+ separate databases (schema overhead ~few MB each)\n- Management: Tools like PgBouncer can handle multiple databases, but config complexity increases\n- With Litestream: Can replicate multiple .db files (not tested at scale, but technically supported)\n\n4. SQLITE WRITE BOTTLENECK REALITY:\n- Single writer limit: ~3,600 writes/sec in WAL mode (vs 291/sec in rollback mode)\n- Production example: Rails app sustained 2.5k+ write requests/sec with SQLite\n- SQLITE_BUSY errors occur under concurrent write contention\n- Your workload: OAuth flows (3-5 writes per auth), signing activity logging (1 write per signature)\n- ESTIMATION: 5 tenants × 20 users × 10 ops/day = ~1,000 writes/day = 0.01 writes/sec\n- VERDICT: SQLite write bottleneck NOT a concern at your current/projected scale (<1,000 users)\n\n5. CHEAP POSTGRESQL OPTIONS (2025):\n- Neon: Free tier (0.25 CU 24/7, 0.5GB), $19/mo Launch tier, serverless auto-scale\n- Supabase: Free tier (Nano instance, 500MB), $25/mo Pro tier (fixed-size instances from $10/mo add-ons)\n- Railway: ~$15/mo for 3 performant DBs (Hobby Tier $5 + compute)\n- Cloud SQL: Shared-core (db-f1-micro) ~$10-20/mo, BUT default configs can cost $500+\n- RECOMMENDATION: Neon or Supabase $19-25/mo range for production <1,000 users\n\n6. KEY CUSTODY DATABASE PATTERNS:\n- Fireblocks: MPC-based, key shares in Intel SGX enclaves + end-user devices\n- BitGo: Multi-sig architecture, hardware-isolated keys, cold storage, SOC 2 Type 2\n- Pattern: Application-level encryption with HSM/KMS + segregated vault structures\n- NO EVIDENCE: That they use database-level encryption (focus is on key material isolation)\n\n7. MIGRATION EFFORT (SQLite → PostgreSQL):\n- sqlx supports both, but syntax differences: ? → $1, INTEGER → SERIAL, AUTOINCREMENT → SERIAL\n- Estimated changes: ~80 queries across 13 files (found with grep)\n- Migration tooling: sqlx-cli migrations work for both, sqlx_migrator for Rust-based migrations\n- Feature flag approach: Possible with sqlx runtime detection, but adds code complexity\n- BEST TIME TO MIGRATE: During active development (NOW) OR when hitting write bottleneck (LATER)\n\n8. DECISION TRIGGERS - WHEN TO MIGRATE:\nSTAY ON SQLITE IF:\n- <1,000 users, <50 tenants\n- Write load <500 writes/sec sustained\n- Single-region deployment acceptable\n- Development velocity prioritized\n\nMIGRATE TO POSTGRESQL IF:\n- >1,000 users OR >50 tenants\n- SQLITE_BUSY errors occurring in production\n- Need multi-region read replicas\n- Planning to use RLS for tenant isolation defense-in-depth\n- Team size growing (more developers = more risk of tenant_id bugs)\n\nMIDDLE GROUND - SQLite with Database-Per-Tenant:\n- Each tenant gets separate .db file\n- Litestream replicates all tenant DBs to GCS\n- Connection pooling: One pool per tenant DB (lazy init on first tenant request)\n- Scales to ~50-100 tenants before management complexity outweighs benefits\n- ADVANTAGE: Complete tenant isolation + SQLite simplicity\n- CAVEAT: Litestream not tested at scale with hundreds of DBs (creator's warning)\n\nRECOMMENDATION FOR KEYCAST:\n1. STAY ON SQLITE for now (current scale doesn't justify migration)\n2. KEEP multi-tenancy via tenant_id column (simplest approach)\n3. ADD automated tests that verify all queries include tenant_id filtering\n4. MONITOR write contention: Log SQLITE_BUSY errors, alert if >1% of queries\n5. MIGRATION TRIGGER: When SQLITE_BUSY errors >1% OR user count >1,000\n6. IF MIGRATING: Neon $19/mo or Supabase $25/mo, implement PostgreSQL RLS for defense-in-depth\n7. APPLICATION ENCRYPTION SUFFICIENT: No need for database-level encryption with current architecture",
  "sections": [
    "Project Notes"
  ],
  "timestamp": 1760647289626,
  "path": "/Users/rabble/code/andotherstuff/keycast/.private-journal/2025-10-17/09-41-29-626400.md"
}